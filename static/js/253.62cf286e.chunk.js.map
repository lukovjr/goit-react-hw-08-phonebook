{"version":3,"file":"static/js/253.62cf286e.chunk.js","mappings":"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","sources":["components/Forma/Forma.styled.jsx","components/Forma/Forma.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Contacts/Contacts.styled.jsx","components/Contacts/Contacts.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Input = styled.input`\n  width: 100%;\n  height: 30px;\n  border-radius: 5px;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  border: 1px solid rgba(33, 33, 33, 0.5);\n  outline: none;\n  padding-left: 10px;\n`;\n\nexport const FormBtn = styled.button`\n  margin-top: 10px;\n  margin-bottom: 20px;\n  font-size: 18px;\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid rgba(33, 33, 33, 0.5);\n`;","import { Input } from './Forma.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport { addContacts } from 'redux/contacts/operations';\nimport { Button } from '@chakra-ui/react';\n\nexport const Forma = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const contact = {\n      id: nanoid(),\n      name: e.target.name.value,\n      number: e.target.number.value,\n    };\n    if (contacts.find(({ name }) => name.toLowerCase() === contact.name.toLowerCase())) {\n      Notify.info(`${contact.name} is in your contacts`);\n      return;\n    }\n    dispatch(addContacts(contact)).unwrap();\n    Notify.success(`Contact is added`);;\n    e.target.reset();\n  };\n\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Name\n          <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          id={nameInputId}\n        />\n        </label>\n\n        <label>\n          Number\n          <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          id={numberInputId}\n        />\n        </label>\n        <Button marginBottom={5} type=\"submit\">Add contact</Button>\n      </form>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const InputFilter = styled.input`\n  width: 100%;\n  height: 30px;\n  border-radius: 5px;\n  margin-top: 5px;\n  border: 1px solid rgba(33, 33, 33, 0.5);\n  outline: none;\n  padding-left: 10px;\n`;","import { InputFilter } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter  = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n\n  return (\n    <label>\n      Find contacts by name\n      <InputFilter type=\"text\" name=\"filter\" onChange={changeFilter } />\n    </label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\npadding:0;\n`\n\nexport const ContactsListEl = styled.li`\nmargin-top:5px;\nlist-style:none;\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\n\n`\n\nexport const ContactsBtn = styled.button`\n  margin-left:20px;\n  font-size: 15px;\n  padding: 6px;\n  border-radius: 5px;\n  border: 1px solid rgba(33, 33, 33, 0.5);\n`","import { deleteContact } from 'redux/contacts/operations';\nimport { ContactsListEl, ContactsList } from './Contacts.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Notify } from 'notiflix';\nimport { Button } from '@chakra-ui/react';\n\nexport const Contacts = ({id}) => {\n  const contactsValue = useSelector(state => state.contacts.items);\n  const filterValue = useSelector(state => state.filters.filter);\n  const isLoading = useSelector(state => state.contacts.isLoading);\n  const dispatch = useDispatch();\n  console.log(contactsValue);\n  console.log(filterValue);\n  \n  const delContact = contactId => {\n    dispatch(deleteContact(contactId)).unwrap();\n    Notify.success(`Contact was deleted`);\n  };\n\n  const getVisibleContacts = contactsValue.filter(({ name }) =>\n      name.toLowerCase().includes(filterValue)\n    );\n\n  return (\n    <>\n    {isLoading && <p>Loading...</p>}\n      <ContactsList >\n        {getVisibleContacts.map(el => {\n          return (\n            <ContactsListEl  key={el.id}>\n              {el.name} <span>{el.number }</span>\n              <Button type=\"button\"  onClick={() => delContact(el.id)}>\n              Delete\n              </Button>\n            </ContactsListEl>\n          );\n        })}\n      </ContactsList>\n    </>\n  );\n};\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Forma } from 'components/Forma';\nimport { Filter } from 'components/Filter';\nimport { Contacts } from 'components/Contacts';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.contacts.isLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Your phonebook</title>\n      </Helmet>\n      <div>{isLoading && 'Please, wait...'}</div>\n      <Forma />\n     <Filter/>\n      <Contacts />\n    </HelmetProvider>\n  );\n}"],"names":["Input","styled","Forma","contacts","useSelector","state","items","dispatch","useDispatch","nameInputId","nanoid","numberInputId","onSubmit","e","preventDefault","contact","id","name","target","value","number","find","toLowerCase","Notify","addContacts","unwrap","reset","type","pattern","title","required","marginBottom","InputFilter","Filter","onChange","filterContacts","ContactsList","ContactsListEl","Contacts","contactsValue","filterValue","filters","filter","isLoading","console","log","getVisibleContacts","includes","map","el","onClick","contactId","deleteContact","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}